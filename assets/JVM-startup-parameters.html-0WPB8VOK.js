import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as t}from"./app-48rL9gLW.js";const n={};function r(l,e){return t(),i("div",null,e[0]||(e[0]=[s('<h2 id="xms-and-xmx-initial-and-maximum-heap-size" tabindex="-1"><a class="header-anchor" href="#xms-and-xmx-initial-and-maximum-heap-size"><span>-Xms and -Xmx: Initial and Maximum Heap Size</span></a></h2><p><code>-Xms</code> is used to set the initial heap size of the JVM at startup, while <code>-Xmx</code> sets the maximum heap size. These two parameters have a direct impact on application performance, and setting them appropriately can avoid frequent GC (Garbage Collection).</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xms512m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx1024m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="xss-set-thread-stack-size" tabindex="-1"><a class="header-anchor" href="#xss-set-thread-stack-size"><span>-Xss: Set Thread Stack Size</span></a></h2><p>The <code>-Xss</code> parameter sets the stack size for each thread. An appropriate stack size can prevent stack overflow errors, especially when the program involves a lot of recursive calls.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xss512k</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="xx-permsize-and-xx-maxpermsize-permanent-generation-memory" tabindex="-1"><a class="header-anchor" href="#xx-permsize-and-xx-maxpermsize-permanent-generation-memory"><span>-XX:PermSize and -XX:MaxPermSize: Permanent Generation Memory</span></a></h2><p><code>-XX:PermSize</code> and <code>-XX:MaxPermSize</code> are used to set the memory size for class information, constant pools, etc. Note that in JDK 8 and above, the permanent generation (PermGen) has been replaced by Metaspace, and the related parameters have changed.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:PermSize=128m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxPermSize=256m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="gc-related" tabindex="-1"><a class="header-anchor" href="#gc-related"><span>GC Related</span></a></h2><p>The G1 Garbage Collector is a low-latency garbage collector provided by the JVM, suitable for most server applications. Using the <code>-XX:+UseG1GC</code> parameter can enable the G1 Garbage Collector and improve GC performance.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseG1GC</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To monitor and tune GC behavior, you can use the <code>-XX:+PrintGCDetails</code> and <code>-XX:+PrintGCDateStamps</code> parameters to output detailed GC log information. These logs are very helpful for analyzing GC performance issues.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDateStamps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>-Xloggc</code> is a very useful JVM parameter to specify the output file path for GC (Garbage Collection) logs. This parameter can help you record the garbage collection log information to a file for future analysis and debugging.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xloggc:/path/to/your/gc.log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="metaspace-related" tabindex="-1"><a class="header-anchor" href="#metaspace-related"><span>Metaspace Related</span></a></h2><h3 id="xx-metaspacesize" tabindex="-1"><a class="header-anchor" href="#xx-metaspacesize"><span>-XX:MetaspaceSize</span></a></h3><p><code>-XX:MetaspaceSize</code> sets the initial size of the Metaspace. When the usage of Metaspace reaches this value, the JVM triggers a garbage collection (GC) to reclaim unused class metadata.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MetaspaceSize=128m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-maxmetaspacesize" tabindex="-1"><a class="header-anchor" href="#xx-maxmetaspacesize"><span>-XX:MaxMetaspaceSize</span></a></h3><p><code>-XX:MaxMetaspaceSize</code> sets the maximum size of the Metaspace. If this parameter is not specified, the Metaspace can grow indefinitely until it exhausts physical memory.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxMetaspaceSize=256m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-minmetaspacefreeratio-and-xx-maxmetaspacefreeratio" tabindex="-1"><a class="header-anchor" href="#xx-minmetaspacefreeratio-and-xx-maxmetaspacefreeratio"><span>-XX:MinMetaspaceFreeRatio and -XX:MaxMetaspaceFreeRatio</span></a></h3><p>These parameters control the free space ratio of the Metaspace. <code>-XX:MinMetaspaceFreeRatio</code> sets the minimum free ratio, and if the free Metaspace falls below this ratio, the JVM will trigger an expansion of the Metaspace. <code>-XX:MaxMetaspaceFreeRatio</code> sets the maximum free ratio, and if the free Metaspace exceeds this ratio, the JVM will trigger a contraction of the Metaspace.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MinMetaspaceFreeRatio=40</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxMetaspaceFreeRatio=70</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-compressedclassspacesize" tabindex="-1"><a class="header-anchor" href="#xx-compressedclassspacesize"><span>-XX:CompressedClassSpaceSize</span></a></h3><p><code>-XX:CompressedClassSpaceSize</code> is used to set the size of the compressed class space, which is a part of the Metaspace used to store class pointers.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:CompressedClassSpaceSize=64m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="class-loading-related" tabindex="-1"><a class="header-anchor" href="#class-loading-related"><span>Class Loading Related</span></a></h2><p>The Java Virtual Machine (JVM) provides various parameters to control class loading behavior. Properly configuring these parameters can help you manage the class loading process better and improve application performance. Here are some commonly used class loading parameters:</p><h3 id="xx-traceclassloading" tabindex="-1"><a class="header-anchor" href="#xx-traceclassloading"><span>-XX:+TraceClassLoading</span></a></h3><p>This parameter is used to trace the class loading process. When enabled, the JVM outputs detailed information about class loading, helping you understand which classes are loaded and when.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+TraceClassLoading</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-traceclassunloading" tabindex="-1"><a class="header-anchor" href="#xx-traceclassunloading"><span>-XX:+TraceClassUnloading</span></a></h3><p>Corresponding to <code>-XX:+TraceClassLoading</code>, this parameter traces the class unloading process. It can help diagnose issues related to class unloading, especially useful when debugging and optimizing memory usage.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+TraceClassUnloading</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-initiatingheapoccupancypercent" tabindex="-1"><a class="header-anchor" href="#xx-initiatingheapoccupancypercent"><span>-XX:InitiatingHeapOccupancyPercent</span></a></h3><p>This parameter sets the heap occupancy threshold, and when it reaches this value, the JVM triggers a global garbage collection. The value is a percentage and is suitable for the G1 Garbage Collector.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:InitiatingHeapOccupancyPercent=45</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="verbose-class" tabindex="-1"><a class="header-anchor" href="#verbose-class"><span>-verbose:class</span></a></h3><p>The <code>-verbose:class</code> parameter outputs detailed information about class loading and unloading, including timestamps and class names for each event. It is very helpful for debugging class loading issues.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -verbose:class</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="xx-nativememorytracking" tabindex="-1"><a class="header-anchor" href="#xx-nativememorytracking"><span>-XX:NativeMemoryTracking</span></a></h3><p>This parameter enables native memory tracking, helping you monitor and analyze the JVM&#39;s native memory usage. It supports &quot;off,&quot; &quot;summary,&quot; and &quot;detail&quot; modes.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:NativeMemoryTracking=summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourapp.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',61)]))}const p=a(n,[["render",r],["__file","JVM-startup-parameters.html.vue"]]),c=JSON.parse('{"path":"/Computer/Java/JVM-startup-parameters.html","title":"JVM startup parameters","lang":"en-US","frontmatter":{"date":"2024-12-03T15:07:29.000Z","updated":"2024-12-04T19:36:17.000Z","title":"JVM startup parameters","shortTitle":"JVM startup parameters","description":"Understand and master JVM startup parameters to optimize the performance and stability of Java applications. This blog introduces the commonly used JVM startup parameters and their configuration methods in detail, helping developers to flexibly adjust JVM behavior and improve program running efficiency. It is suitable for all Java developers and IT professionals to refer to, and is an essential guide to improve system performance.","category":["Computer"],"tag":["Java"]Activiti介绍\\"博客文章写一个标题，要求语气亲切，写10个\\n为\\"JVM 启动参数\\"博客文章写一个description，用于谷歌seo\\n"},"headers":[{"level":2,"title":"-Xms and -Xmx: Initial and Maximum Heap Size","slug":"xms-and-xmx-initial-and-maximum-heap-size","link":"#xms-and-xmx-initial-and-maximum-heap-size","children":[]},{"level":2,"title":"-Xss: Set Thread Stack Size","slug":"xss-set-thread-stack-size","link":"#xss-set-thread-stack-size","children":[]},{"level":2,"title":"-XX:PermSize and -XX:MaxPermSize: Permanent Generation Memory","slug":"xx-permsize-and-xx-maxpermsize-permanent-generation-memory","link":"#xx-permsize-and-xx-maxpermsize-permanent-generation-memory","children":[]},{"level":2,"title":"GC Related","slug":"gc-related","link":"#gc-related","children":[]},{"level":2,"title":"Metaspace Related","slug":"metaspace-related","link":"#metaspace-related","children":[{"level":3,"title":"-XX:MetaspaceSize","slug":"xx-metaspacesize","link":"#xx-metaspacesize","children":[]},{"level":3,"title":"-XX:MaxMetaspaceSize","slug":"xx-maxmetaspacesize","link":"#xx-maxmetaspacesize","children":[]},{"level":3,"title":"-XX:MinMetaspaceFreeRatio and -XX:MaxMetaspaceFreeRatio","slug":"xx-minmetaspacefreeratio-and-xx-maxmetaspacefreeratio","link":"#xx-minmetaspacefreeratio-and-xx-maxmetaspacefreeratio","children":[]},{"level":3,"title":"-XX:CompressedClassSpaceSize","slug":"xx-compressedclassspacesize","link":"#xx-compressedclassspacesize","children":[]}]},{"level":2,"title":"Class Loading Related","slug":"class-loading-related","link":"#class-loading-related","children":[{"level":3,"title":"-XX:+TraceClassLoading","slug":"xx-traceclassloading","link":"#xx-traceclassloading","children":[]},{"level":3,"title":"-XX:+TraceClassUnloading","slug":"xx-traceclassunloading","link":"#xx-traceclassunloading","children":[]},{"level":3,"title":"-XX:InitiatingHeapOccupancyPercent","slug":"xx-initiatingheapoccupancypercent","link":"#xx-initiatingheapoccupancypercent","children":[]},{"level":3,"title":"-verbose:class","slug":"verbose-class","link":"#verbose-class","children":[]},{"level":3,"title":"-XX:NativeMemoryTracking","slug":"xx-nativememorytracking","link":"#xx-nativememorytracking","children":[]}]}],"git":{"createdTime":1733409411000,"updatedTime":1733409411000,"contributors":[{"name":"LYPvvvLYP","email":"1909266427@qq.com","commits":1}]},"readingTime":{"minutes":2.88,"words":863},"filePathRelative":"Computer/Java/JVM startup parameters.md","localizedDate":"December 3, 2024","excerpt":"<h2>-Xms and -Xmx: Initial and Maximum Heap Size</h2>\\n<p><code>-Xms</code> is used to set the initial heap size of the JVM at startup, while <code>-Xmx</code> sets the maximum heap size. These two parameters have a direct impact on application performance, and setting them appropriately can avoid frequent GC (Garbage Collection).</p>"}');export{p as comp,c as data};
