import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-48rL9gLW.js";const r={};function l(n,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h2 id="spring-kafka-生产者参数" tabindex="-1"><a class="header-anchor" href="#spring-kafka-生产者参数"><span>Spring Kafka 生产者参数</span></a></h2><h3 id="acks" tabindex="-1"><a class="header-anchor" href="#acks"><span><code>acks</code></span></a></h3><p>用于指定生产者在接收到服务器的确认信号之前，所要求的确认级别。常见值包括 <code>0</code>（不确认），<code>1</code>（只确认领导者已收到），和 <code>all</code>（所有副本已收到）。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.producer.acks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: <code>all</code>（以确保高可靠性）</p><h3 id="retries" tabindex="-1"><a class="header-anchor" href="#retries"><span><code>retries</code></span></a></h3><p>指定生产者发送失败时的重试次数。这有助于提升消息发送的可靠性。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.producer.retries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: 3 或更多，视应用容错需求而定。</p><h3 id="batch-size" tabindex="-1"><a class="header-anchor" href="#batch-size"><span><code>batch.size</code></span></a></h3><p>指定生产者批量发送消息的大小（以字节为单位）。增大这个值可以提高吞吐量，但会增加延迟。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.producer.batch-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">16384</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: 16384（16KB），可根据实际需求调整。</p><h3 id="linger-ms" tabindex="-1"><a class="header-anchor" href="#linger-ms"><span><code>linger.ms</code></span></a></h3><p>设定生产者在发送消息前等待的时间。通过增加等待时间可以聚集更多消息，从而提高吞吐量。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.producer.linger-ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: 1（减少延迟），可以根据需求调整至更高的值以增加吞吐量。</p><h2 id="spring-kafka-消费者参数" tabindex="-1"><a class="header-anchor" href="#spring-kafka-消费者参数"><span>Spring Kafka 消费者参数</span></a></h2><h3 id="auto-offset-reset" tabindex="-1"><a class="header-anchor" href="#auto-offset-reset"><span><code>auto.offset.reset</code></span></a></h3><p>用于指定消费者在没有找到初始偏移量或当前偏移量在服务器中不存在时应该如何处理。可选值包括 <code>earliest</code>（从最早的可用数据开始读取）和 <code>latest</code>（从最新的数据开始读取）。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.auto-offset-reset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">earliest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: <code>earliest</code>（确保不会错过任何消息）</p><h3 id="enable-auto-commit" tabindex="-1"><a class="header-anchor" href="#enable-auto-commit"><span><code>enable.auto.commit</code></span></a></h3><p>控制是否自动提交偏移量。如果设置为 <code>true</code>，消费者会定期自动提交它们的偏移量。如果你希望手动管理偏移量提交，则应将其设置为 <code>false</code>。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.enable-auto-commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: <code>false</code>（便于手动精确控制提交）</p><h3 id="auto-commit-interval-ms" tabindex="-1"><a class="header-anchor" href="#auto-commit-interval-ms"><span><code>auto.commit.interval.ms</code></span></a></h3><p>消费者自动提交的时间间隔由参数 <code>auto.commit.interval.ms</code> 来控制。该参数指定了消费者自动提交偏移量的时间间隔（以毫秒为单位）。当 <code>enable.auto.commit</code> 设置为 <code>true</code> 时，这个参数会生效。</p><p>假设我们将自动提交时间间隔设置为 5000 毫秒（即 5 秒），可以在配置文件中这样设置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.enable-auto-commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.auto-commit-interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">5000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐的值取决于你的应用场景和需求：</p><ul><li><strong>低延迟应用</strong>: 如果你希望低延迟且可以容忍较多的重复处理，可以设置较短的时间间隔，如 1000 毫秒（1 秒）。</li><li><strong>高吞吐量应用</strong>: 如果你希望减少提交操作带来的开销，可以设置较长的时间间隔，如 5000 毫秒（5 秒）或更长。</li></ul><h3 id="max-poll-records" tabindex="-1"><a class="header-anchor" href="#max-poll-records"><span><code>max.poll.records</code></span></a></h3><p>指定每次调用 <code>poll()</code> 方法时返回的最大记录数。这有助于控制消费者在每次轮询时处理的消息量，以避免单次处理过多消息导致延迟。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.max-poll-records</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">500</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: 500（根据吞吐量需求调整）</p><h3 id="max-poll-interval-ms" tabindex="-1"><a class="header-anchor" href="#max-poll-interval-ms"><span><code>max.poll.interval.ms</code></span></a></h3><p>消费者两次 <code>poll</code> 调用之间的最大时间间隔由 <code>max.poll.interval.ms</code> 参数来控制。这个参数的作用是确保消费者在规定的时间间隔内调用 <code>poll()</code> 方法。如果超过了这个时间间隔而没有调用 <code>poll()</code>，Kafka 会认为该消费者已经失效，并且会将该分区重新分配给组内的其他消费者。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.max-poll-interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">300000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>推荐的值取决于你的应用场景和需求：</p><ul><li><strong>低延迟应用</strong>: 如果你希望系统能够快速检测到消费者失效，可以设置较短的时间间隔，如 30000 毫秒（30 秒）。</li><li><strong>高吞吐量应用</strong>: 如果你的处理逻辑较复杂，需要较长时间来处理每批消息，可以设置较长的时间间隔，如 300000 毫秒（5 分钟）或更长。</li></ul><h3 id="session-timeout-ms" tabindex="-1"><a class="header-anchor" href="#session-timeout-ms"><span><code>session.timeout.ms</code></span></a></h3><p>指定消费者与 Kafka 服务器之间的会话超时时间。如果消费者在这个时间内没有发送心跳，Kafka 会认为该消费者已经失效并进行重平衡。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.session.timeout.ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐值</strong>: 10000 毫秒（10 秒），可以根据实际情况调整。</p><h3 id="request-timeout-ms" tabindex="-1"><a class="header-anchor" href="#request-timeout-ms"><span><code>request.timeout.ms</code></span></a></h3><p>消费者请求超时时间由 <code>request.timeout.ms</code> 参数来控制。这个参数指定了消费者向 Kafka 服务器发送请求后，等待响应的最大时间。如果在这个时间内没有收到响应，消费者会认为请求失败，并进行相应的错误处理（如重试）。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.kafka.consumer.request.timeout.ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">30000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>推荐的值取决于你的应用场景和需求：</p><ul><li><strong>低延迟应用</strong>: 如果你希望快速检测到请求超时，可以设置较短的时间间隔，如 10000 毫秒（10 秒）。</li><li><strong>高可靠性应用</strong>: 如果你的网络状况较好，且希望尽可能等待响应，可以设置较长的时间间隔，如 60000 毫秒（60 秒）。</li></ul>`,50)]))}const o=i(r,[["render",l],["__file","Spring-Kafka-Parameters.html.vue"]]),p=JSON.parse('{"path":"/zh/Computer/Spring-Kafka-Parameters.html","title":"Spring Kafka 参数","lang":"zh-CN","frontmatter":{"date":"2024-12-03T17:57:37.000Z","updated":"2024-12-06T12:59:41.000Z","title":"Spring Kafka 参数","shortTitle":"Spring Kafka 参数","description":"探讨 Spring Kafka 中参数配置的最佳实践：涵盖生产者和消费者参数优化、序列化设置、错误处理及负载均衡策略，提升数据流处理性能与可靠性。","category":["计算机"],"tag":["Kafka"]Activiti介绍\\"博客文章写一个标题，要求语气亲切，写10个\\n为\\"Activiti介绍\\"博客文章写一个description，用于谷歌seo\\n你是一个资深Kafka程序员，请为\\"Spring Kafka 参数\\"博客文章写一个description，描述中包含专业术语，用于谷歌seo，用中文，字数在150字符以内，语气专业且吸引人。\\n"},"headers":[{"level":2,"title":"Spring Kafka 生产者参数","slug":"spring-kafka-生产者参数","link":"#spring-kafka-生产者参数","children":[{"level":3,"title":"acks","slug":"acks","link":"#acks","children":[]},{"level":3,"title":"retries","slug":"retries","link":"#retries","children":[]},{"level":3,"title":"batch.size","slug":"batch-size","link":"#batch-size","children":[]},{"level":3,"title":"linger.ms","slug":"linger-ms","link":"#linger-ms","children":[]}]},{"level":2,"title":"Spring Kafka 消费者参数","slug":"spring-kafka-消费者参数","link":"#spring-kafka-消费者参数","children":[{"level":3,"title":"auto.offset.reset","slug":"auto-offset-reset","link":"#auto-offset-reset","children":[]},{"level":3,"title":"enable.auto.commit","slug":"enable-auto-commit","link":"#enable-auto-commit","children":[]},{"level":3,"title":"auto.commit.interval.ms","slug":"auto-commit-interval-ms","link":"#auto-commit-interval-ms","children":[]},{"level":3,"title":"max.poll.records","slug":"max-poll-records","link":"#max-poll-records","children":[]},{"level":3,"title":"max.poll.interval.ms","slug":"max-poll-interval-ms","link":"#max-poll-interval-ms","children":[]},{"level":3,"title":"session.timeout.ms","slug":"session-timeout-ms","link":"#session-timeout-ms","children":[]},{"level":3,"title":"request.timeout.ms","slug":"request-timeout-ms","link":"#request-timeout-ms","children":[]}]}],"git":{"createdTime":1733225961000,"updatedTime":1733463231000,"contributors":[{"name":"LYPvvvLYP","email":"1909266427@qq.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1413},"filePathRelative":"zh/Computer/Spring Kafka Parameters.md","localizedDate":"2024年12月4日","excerpt":"<h2>Spring Kafka 生产者参数</h2>\\n<h3><code>acks</code></h3>\\n<p>用于指定生产者在接收到服务器的确认信号之前，所要求的确认级别。常见值包括 <code>0</code>（不确认），<code>1</code>（只确认领导者已收到），和 <code>all</code>（所有副本已收到）。</p>\\n<div class=\\"language-properties line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"properties\\" data-title=\\"properties\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#C678DD\\">spring.kafka.producer.acks</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#98C379\\">all</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{o as comp,p as data};
