import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-48rL9gLW.js";const t={};function l(d,i){return n(),e("div",null,i[0]||(i[0]=[a(`<p><code>dependency:tree</code> 命令用来查看项目中的所有依赖项，包括直接依赖和传递依赖。</p><h2 id="maven-依赖树命令" tabindex="-1"><a class="header-anchor" href="#maven-依赖树命令"><span>Maven 依赖树命令</span></a></h2><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency:tree</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会生成一个包含所有直接和传递依赖的依赖树，输出到终端。</p><p>假设你的项目 <code>pom.xml</code> 文件中有以下依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;5.2.9.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>mvn dependency:tree</code> 后，你可能会看到类似以下的输出：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[INFO] --- maven-dependency-plugin:2.8:tree (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default-cli</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) @ my-project ---</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[INFO] my-project:jar:1.0-SNAPSHOT</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[INFO] +- org.springframework:spring-core:jar:5.2.9.RELEASE:compile</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[INFO] |  </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> org.springframework:spring-jcl:jar:5.2.9.RELEASE:compile</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[INFO] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> junit:junit:jar:4.12:test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>spring-core</code> 依赖于 <code>spring-jcl</code>，而 <code>my-project</code> 也直接依赖于 <code>junit</code>。</p><h2 id="过滤依赖树" tabindex="-1"><a class="header-anchor" href="#过滤依赖树"><span>过滤依赖树</span></a></h2><p>如果你只想查看特定的依赖项，可以使用 <code>-Dincludes</code> 和 <code>-Dexcludes</code> 参数来过滤依赖树。例如，如果你只想查看 <code>spring</code> 相关的依赖项，可以运行以下命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency:tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dincludes=org.springframework</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)]))}const p=s(t,[["render",l],["__file","Maven-dependency-tree.html.vue"]]),k=JSON.parse('{"path":"/zh/Computer/Maven-dependency-tree.html","title":"深入解析Maven依赖树：冲突解决与优化策略指南","lang":"zh-CN","frontmatter":{"date":"2024-12-03T19:31:21.000Z","updated":"2024-12-05T21:37:48.000Z","title":"深入解析Maven依赖树：冲突解决与优化策略指南","shortTitle":"Maven 依赖树","description":"解析Maven依赖树的构建与分析，揭示多级依赖关系中的冲突与优化策略，提供实用工具和最佳实践，助力开发者有效管理项目依赖，提升构建效率。","category":["计算机"]Activiti介绍\\"博客文章写一个标题，要求语气亲切，写10个\\n为\\"Activiti介绍\\"博客文章写一个description，用于谷歌seo\\n你是一个资深程序员，请为\\"Maven 依赖树\\"博客文章写一个description，描述中包含专业术语，用于谷歌seo，用中文，字数在150字符以内，语气专业且吸引人。\\n"},"headers":[{"level":2,"title":"Maven 依赖树命令","slug":"maven-依赖树命令","link":"#maven-依赖树命令","children":[]},{"level":2,"title":"过滤依赖树","slug":"过滤依赖树","link":"#过滤依赖树","children":[]}],"git":{"createdTime":1733225961000,"updatedTime":1733409411000,"contributors":[{"name":"LYPvvvLYP","email":"1909266427@qq.com","commits":1}]},"readingTime":{"minutes":1.54,"words":462},"filePathRelative":"zh/Computer/Maven dependency tree.md","localizedDate":"2024年12月4日","excerpt":"<p><code>dependency:tree</code> 命令用来查看项目中的所有依赖项，包括直接依赖和传递依赖。</p>\\n<h2>Maven 依赖树命令</h2>\\n<div class=\\"language-sh line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sh\\" data-title=\\"sh\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">mvn</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> dependency:tree</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{p as comp,k as data};
