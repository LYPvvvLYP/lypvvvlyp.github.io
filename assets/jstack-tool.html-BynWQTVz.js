import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as n}from"./app-48rL9gLW.js";const i={};function r(o,e){return n(),s("div",null,e[0]||(e[0]=[t(`<p>The <code>jstack</code> tool is used to generate Java thread stack traces. It helps you understand the thread states of your current Java application, aiding in diagnosing performance issues or thread deadlocks.</p><p>Before using <code>jstack</code>, you need to know the PID (Process ID) of the target Java process. You can use the <code>jps</code> command to view the currently running Java processes and their PIDs. Then, you can use the <code>jstack</code> command to generate the thread stack trace.</p><p>The basic command format is as follows:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For example, if you want to generate a thread stack trace for a Java process with PID 12345, the command is:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After executing the above command, <code>jstack</code> will output the stack trace information of all threads in the current Java process.</p><h2 id="sample-output-and-field-explanation" tabindex="-1"><a class="header-anchor" href="#sample-output-and-field-explanation"><span>Sample Output and Field Explanation</span></a></h2><p>Here is a typical <code>jstack</code> output example:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>2024-12-03 17:50:17</span></span>
<span class="line"><span>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.181-b13 mixed mode):</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;main&quot; #1 prio=5 os_prio=0 tid=0x000000000276c000 nid=0x1f84 waiting on condition [0x0000000002bfe000]</span></span>
<span class="line"><span>   java.lang.Thread.State: WAITING (parking)</span></span>
<span class="line"><span>    at sun.misc.Unsafe.park(Native Method)</span></span>
<span class="line"><span>    - parking to wait for  &lt;0x00000000d5cd8f18&gt; (a java.util.concurrent.CountDownLatch$Sync)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)</span></span>
<span class="line"><span>    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)</span></span>
<span class="line"><span>    at com.example.MyClass.main(MyClass.java:15)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Field explanations for the sample output:</p><ol><li><strong>Thread Name (&quot;main&quot;)</strong>: Indicates the name of the thread, here it is &quot;main&quot;.</li><li><strong>Thread ID (#1)</strong>: The internal thread ID of the JVM.</li><li><strong>Priority (prio=5)</strong>: The priority of the thread.</li><li><strong>OS Priority (os_prio=0)</strong>: The thread&#39;s priority in the operating system.</li><li><strong>Thread Identifier (tid=0x000000000276c000)</strong>: The identifier of the thread.</li><li><strong>Native ID (nid=0x1f84)</strong>: The native ID of the thread in the operating system.</li><li><strong>Thread State</strong>: The current state of the thread, here it is WAITING (parking), indicating the thread is waiting for a condition.</li><li><strong>Stack Trace</strong>: The stack trace of the thread, showing the code being executed by the thread.</li></ol>`,12)]))}const d=a(i,[["render",r],["__file","jstack-tool.html.vue"]]),p=JSON.parse('{"path":"/Computer/Java/jstack-tool.html","title":"jstack tool","lang":"en-US","frontmatter":{"date":"2024-12-03T15:07:29.000Z","updated":"2024-12-04T19:52:50.000Z","title":"jstack tool","shortTitle":"jstack tool","description":"Briefly introduce the role of the jstack tool in Java application diagnosis. This article outlines the basic usage of the jstack tool and its application in analyzing thread stacks, diagnosing deadlocks and performance issues, and helps developers quickly resolve Java application performance bottlenecks. It is suitable for reference by all Java developers and IT professionals.","category":["Computer"],"tag":["JVM"]Activiti介绍\\"博客文章写一个标题，要求语气亲切，写10个\\n为\\"jstack工具\\"博客文章写一个description，用于谷歌seo，用中文，短一点\\n"},"headers":[{"level":2,"title":"Sample Output and Field Explanation","slug":"sample-output-and-field-explanation","link":"#sample-output-and-field-explanation","children":[]}],"git":{"createdTime":1733409411000,"updatedTime":1733409411000,"contributors":[{"name":"LYPvvvLYP","email":"1909266427@qq.com","commits":1}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"Computer/Java/jstack tool.md","localizedDate":"December 3, 2024","excerpt":"<p>The <code>jstack</code> tool is used to generate Java thread stack traces. It helps you understand the thread states of your current Java application, aiding in diagnosing performance issues or thread deadlocks.</p>\\n<p>Before using <code>jstack</code>, you need to know the PID (Process ID) of the target Java process. You can use the <code>jps</code> command to view the currently running Java processes and their PIDs. Then, you can use the <code>jstack</code> command to generate the thread stack trace.</p>"}');export{d as comp,p as data};
