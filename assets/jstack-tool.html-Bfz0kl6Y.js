import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as n}from"./app-48rL9gLW.js";const t={};function l(r,a){return n(),i("div",null,a[0]||(a[0]=[e(`<p><code>jstack</code> 工具，它是用来生成 Java 线程栈跟踪的一个工具。通过它，你可以了解当前 Java 应用程序的线程状态，从而帮助你诊断性能问题或线程死锁等问题。</p><p>在使用 <code>jstack</code> 之前，你需要知道目标 Java 进程的 PID（进程 ID）。可以通过 <code>jps</code> 命令来查看当前运行的 Java 进程及其 PID。然后，你可以使用 <code>jstack</code> 命令来生成线程栈跟踪。</p><p>基本命令格式如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，如果你想生成 PID 为 12345 的 Java 进程的线程栈跟踪，命令如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上述命令后，<code>jstack</code> 会输出当前 Java 进程的所有线程的栈跟踪信息。</p><h2 id="输出示例及字段解释" tabindex="-1"><a class="header-anchor" href="#输出示例及字段解释"><span>输出示例及字段解释</span></a></h2><p>以下是一个典型的 <code>jstack</code> 输出示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>2024-12-03 17:50:17</span></span>
<span class="line"><span>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.181-b13 mixed mode):</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;main&quot; #1 prio=5 os_prio=0 tid=0x000000000276c000 nid=0x1f84 waiting on condition [0x0000000002bfe000]</span></span>
<span class="line"><span>   java.lang.Thread.State: WAITING (parking)</span></span>
<span class="line"><span>    at sun.misc.Unsafe.park(Native Method)</span></span>
<span class="line"><span>    - parking to wait for  &lt;0x00000000d5cd8f18&gt; (a java.util.concurrent.CountDownLatch$Sync)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)</span></span>
<span class="line"><span>    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)</span></span>
<span class="line"><span>    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)</span></span>
<span class="line"><span>    at com.example.MyClass.main(MyClass.java:15)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出示例中的每个字段的含义如下：</p><ol><li><strong>Thread Name (&quot;main&quot;)</strong>: 表示线程的名称，在这里是 &quot;main&quot;。</li><li><strong>Thread ID (#1)</strong>: JVM 内部的线程 ID。</li><li><strong>Priority (prio=5)</strong>: 线程的优先级。</li><li><strong>OS Priority (os_prio=0)</strong>: 操作系统的线程优先级。</li><li><strong>Thread Identifier (tid=0x000000000276c000)</strong>: 线程的标识符。</li><li><strong>Native ID (nid=0x1f84)</strong>: 线程在操作系统中的原生 ID。</li><li><strong>Thread State</strong>: 线程当前的状态，在这里是 WAITING (parking)，表示线程正在等待某个条件。</li><li><strong>Stack Trace</strong>: 线程的栈跟踪，显示了线程执行的每一行代码。</li></ol>`,12)]))}const o=s(t,[["render",l],["__file","jstack-tool.html.vue"]]),p=JSON.parse('{"path":"/zh/Computer/Java/jstack-tool.html","title":"jstack 工具","lang":"zh-CN","frontmatter":{"date":"2024-12-03T15:07:29.000Z","updated":"2024-12-04T19:46:20.000Z","title":"jstack 工具","shortTitle":"jstack 工具","description":"简要介绍 jstack 工具在 Java 应用诊断中的作用。本文概述 jstack 工具的基本用法及其在分析线程堆栈、诊断死锁和性能问题中的应用，帮助开发者快速解决 Java 应用性能瓶颈。适合所有 Java 开发者和 IT 专业人士参考。","category":["计算机"],"tag":["JVM"]Activiti介绍\\"博客文章写一个标题，要求语气亲切，写10个\\n为\\"jstack工具\\"博客文章写一个description，用于谷歌seo，用中文，短一点\\n"},"headers":[{"level":2,"title":"输出示例及字段解释","slug":"输出示例及字段解释","link":"#输出示例及字段解释","children":[]}],"git":{"createdTime":1733225961000,"updatedTime":1733409411000,"contributors":[{"name":"LYPvvvLYP","email":"1909266427@qq.com","commits":1}]},"readingTime":{"minutes":2.12,"words":636},"filePathRelative":"zh/Computer/Java/jstack tool.md","localizedDate":"2024年12月3日","excerpt":"<p><code>jstack</code> 工具，它是用来生成 Java 线程栈跟踪的一个工具。通过它，你可以了解当前 Java 应用程序的线程状态，从而帮助你诊断性能问题或线程死锁等问题。</p>\\n<p>在使用 <code>jstack</code> 之前，你需要知道目标 Java 进程的 PID（进程 ID）。可以通过 <code>jps</code> 命令来查看当前运行的 Java 进程及其 PID。然后，你可以使用 <code>jstack</code> 命令来生成线程栈跟踪。</p>\\n<p>基本命令格式如下：</p>\\n<div class=\\"language-sh line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sh\\" data-title=\\"sh\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">jstack</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">pi</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">d&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{o as comp,p as data};
